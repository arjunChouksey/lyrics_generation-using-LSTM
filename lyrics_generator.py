# -*- coding: utf-8 -*-
"""lyrics_generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KbVAL9HmcoU87MvxVjHGavzoNuTkdmv_
"""

import pandas as pd
import numpy as np

from google.colab import files
upload = files.upload()

df = pd.read_csv("new_songs.csv")
df = df[:100]["text"]

corpus = df[0]
for i in range(len(df)):
    corpus = corpus+df[i]

def combine(corpus):
    t = corpus.split()
    j = ""
    for x in t:
        j=j+x+" "
    return j.lower()

corpus = combine(corpus)

chars = sorted(list(set(corpus)))
def keep_only_chars(corpus):
    c = ""
    for i in range(len(corpus)):
        if corpus[i] not in chars[1:14]:
            c += corpus[i]
    return c
corpus = keep_only_chars(corpus)

chars = sorted(list(set(corpus)))
char_to_int = dict((c,i) for i,c in enumerate(chars))

n_chars = len(corpus)

seq_length = 100
X =[]
y = []
for i in range(0,n_chars-seq_length,1):
    seq_in= corpus[i:i+seq_length]
    seq_out = corpus[i+seq_length]
    X.append([char_to_int[x] for x in seq_in])
    y.append([char_to_int[seq_out]])
    
X =  np.reshape(X,(len(X),seq_length,1))
X = X/float(len(chars))
from keras.models import Sequential
from keras.utils import to_categorical
from keras.layers import Dense,LSTM,Dropout
y = to_categorical(y)

model = Sequential()
model.add(LSTM(256,input_shape =(X.shape[1],X.shape[2])))
model.add(Dropout(0.2))
model.add(Dense(y.shape[1],activation = 'softmax'))
model.compile(loss='categorical_crossentropy',optimizer = 'adam')

model.fit(X,y,epochs = 100,batch_size = 300)

int_to_char = dict((i,c) for i,c in enumerate(chars))
test = pd.read_csv("new_songs.csv")
test = test["text"]
test = test[98]
test= combine(test)
test_corpus = ""
for i in range(len(test)):
    if test[i] in chars:
        test_corpus+=test[i]
seq_length = 100
X_test =[]
for i in range(0,len(test_corpus)-seq_length,1):
    seq_in= test_corpus[i:i+seq_length]
    X_test.append([char_to_int[x] for x in seq_in])

start = np.random.randint(0,len(X_test)-1)
pattern = X_test[start]
print("Seed \n")
print(''.join([int_to_char[value] for value in pattern]))
predict = []
for i in range(1000):
    x = np.reshape(pattern,(1,len(pattern),1))
    x = x/float(len(chars))
    prediction = model.predict(x)
    index = np.argmax(prediction)
    result = int_to_char[index]
    seq_in = [int_to_char[value] for value in pattern]
    predict.append(index)
    pattern.append(index)
    pattern = pattern[1:len(pattern)]

generated= ""
for x in predict:
    generated += int_to_char[x]

print(generated)

print(generated)
d = ""
for x in pattern:
    d+=int_to_char[x]
print(d)

model.save("lyrics_generated.h5")

